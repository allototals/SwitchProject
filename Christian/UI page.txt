using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AppZoneUI.Framework;
using CMS.Common.Data;
using CMS.Services;
using CMS.Data;
using CMS.Common.Utility;
using System.Web.Security;
using ViaCardUI.Models;
using System.IO;
using ViaCard.Base;
using AppZoneUI.Framework.Mods;

namespace ViaCardUI
{
    public class BatchCardIssuanceRequestUI : EntityUI<BatchCardIssuanceRequestModel>
    {
        public BatchCardIssuanceRequestUI()
        {
            PrePopulateFrom<BatchCardIssuanceRequestModel>(x =>
                {
                    UploadDownloadLimit udl = new UploadDownloadLimitSystem().GetSingle();
                    x.UploadFormat = udl.UploadFormat;
                    x.UploadHeader = udl.UploadHeader;
                    return x;
                });

            var user1 = (Membership.GetUser() as PANE.Framework.Functions.DTO.FunctionsMembershipUser).UserDetails;
            ViaCard.Base.UserService.BaseUser user = new ViaCard.Base.UserService.BaseUser();
            using (var theUserClient = new ViaCard.Base.UserService.UserServiceClient())
            {
                user = theUserClient.GetByID(PortalUtility.MfbCode, user1.ID);
            }
            PANE.Framework.MfbServiceRef.Mfb theMfb = new PANE.Framework.MfbServiceRef.Mfb();
            using (var ThemfbClient = new PANE.Framework.MfbServiceRef.MfbServiceClient())
            {
                theMfb = ThemfbClient.GetByCode(user1.MFBCode);
            }
            IList<InstantIssuanceCardProfile> CardProfiles = new List<InstantIssuanceCardProfile>();
            
            CardProfiles = new InstantIssuanceCardProfileSystem().RetrieveActiveProfile().OrderBy(p => p.Name).ToList();


            UseFullView();
            AddNorthSection()
                .StretchFields(50)
                .IsFramed()
                .WithTitle("Batch Card Issuance Request")
                .WithFields(
                new List<IField>()
                {
                    Map(x => x.CardProfile).AsSectionField<DropDownList>().Of<InstantIssuanceCardProfile>(CardProfiles).ListOf(x=>x.Name,x=>x.ID).LabelTextIs("Card Profile"),
                    Map(x => x.TheFile).AsSectionField<Upload>().LabelTextIs("Select File"),

                    Map(x=> "Upload Format In CSV").AsSectionField<TextLabel>(),
                     Map(x=> x.UploadHeader.Replace(",","<br/>")).AsSectionField<TextLabel>().LabelTextIs("Upload Header"),
                    Map(x=> x.UploadFormat.Replace(",","<br/>")).AsSectionField<TextLabel>().LabelTextIs("Upload Format"),

               
            AddSectionButton()
                .ApplyMod<IconMod>(x => x.WithIcon(Ext.Net.Icon.PackageGo))
                .WithText("Upload")
                .SubmitTo(x =>
                {
                    if (user == null)
                    {
                        Ext.Net.ExtNet.AddScript("alert('{0}');", string.Format("Sorry your session has expired, please refresh"));
                        return false;
                    }

                    bool result = true;
                    try
                    {
                        Stream fs = x.TheFile.InputStream;
                        
                        UploadDownloadLimit upd = new UploadDownloadLimitSystem().GetSingle();
                        bool isExceeded = new BatchIssuanceSystem().IsMaxUpLoadExceeded(fs, upd);
                        if (isExceeded == false)
                        {                            
                            Ext.Net.ExtNet.AddScript("alert('{0}');", string.Format("Sorry you have exceeded the batch upload limit of {0}, Try again",
                                upd != null ? upd.UploadLimit.ToString() : System.Configuration.ConfigurationManager.AppSettings["MaxRecordsinFileUpload"]));

                            result = false;
                        }
                        else
                        {
                            bool IsAffiliate = false;
                            fs.Position = 0;
                            if (user1.Role.UserCategory == PANE.Framework.Functions.DTO.UserCategory.Mfb)
                            {
                                IsAffiliate = true;
                            }
                            new BatchIssuanceSystem().LinkCardsToAccounts(fs, x.CardProfile, user, IsAffiliate);
                        }
                    }
                    catch (Exception ex)
                    {
                        PANE.ERRORLOG.ErrorLogger.Log(ex); 
                        x.Err_Msg = string.Format("An error occured while reading the file: {0}", ex.Message);
                        result = false;
                    }
                    return result;
                })
                .OnFailureDisplay(x => x.Err_Msg)//"Batch Upload Failed! Please check the file and try again.")
                .OnSuccessRedirectTo("BatchIssuanceDetail.aspx")

             });

        }
    }
}
